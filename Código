<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MS-DOS Emulator</title>
    <style>
        @font-face {
            font-family: 'MS-DOS';
            src: url('front.ttf') format('truetype'); /* Ensure the path is correct */
        }

        body {
            background-color: black;
            color: #00FF00;
            font-family: 'MS-DOS', monospace;
            padding: 20px;
            overflow: hidden;
            user-select: none; /* Prevent text selection */
            position: relative;
        }

        #terminal-container {
            position: relative;
            width: 100%;
            height: 300px;
            border: 1px solid #00FF00;
            overflow: hidden;
        }

        #background-animation, #overlay-animation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            background: repeating-linear-gradient(0deg, rgba(0, 255, 0, 0.1) 0, rgba(0, 255, 0, 0.1) 1px, rgba(0, 0, 0, 0.1) 1px, rgba(0, 0, 0, 0.1) 2px);
        }

        #background-animation {
            animation: screenFlicker 0.1s infinite;
        }

        #overlay-animation {
            z-index: 3;
            animation: slowFlicker 3s infinite;
            mix-blend-mode: multiply;
        }

        @keyframes screenFlicker {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.95; }
        }

        @keyframes slowFlicker {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }

        #terminal {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            padding: 10px;
            background: none;
            overflow-y: auto;
        }

        #input-line {
            display: flex;
            background: none;
        }

        #prompt {
            flex: none;
        }

        #input {
            flex: auto;
            border: none;
            background: none;
            color: #00FF00;
            font-family: 'MS-DOS', monospace;
            outline: none;
        }

        .error {
            color: red;
        }

        .crash {
            color: red;
            font-weight: bold;
            animation: crashBlink 0.5s infinite;
        }

        @keyframes crashBlink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }

        #windows-interface {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #008080;
            color: white;
            font-family: Arial, sans-serif;
            z-index: 4;
        }

        #windows-interface .window {
            position: absolute;
            top: 50px;
            left: 50px;
            width: 200px;
            height: 150px;
            background-color: white;
            color: black;
            border: 2px solid black;
            padding: 10px;
            box-shadow: 2px 2px 0px rgba(0, 0, 0, 0.5);
        }

        #windows-interface .window h1 {
            margin: 0;
            font-size: 16px;
            background-color: navy;
            color: white;
            padding: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        #windows-interface .window p {
            margin: 20px 0 0 0;
        }

        #close-button {
            cursor: pointer;
            background-color: red;
            color: white;
            border: none;
            padding: 2px 5px;
            font-size: 14px;
        }
    </style>
</head>
<body ontouchstart="focusInput()">
    <div id="terminal-container">
        <div id="background-animation"></div>
        <div id="overlay-animation"></div>
        <div id="terminal" onclick="focusInput();">
            <div>Microsoft DOS [Version 6.22]</div>
            <div>(C)Copyright Microsoft Corp 1981-1994.</div>
            <div id="input-line">
                <div id="prompt">C:\></div>
                <input type="text" id="input" autofocus>
            </div>
        </div>
        <div id="windows-interface">
            <div class="window">
                <h1>Message <button id="close-button">X</button></h1>
                <p>Really! Why do you try?</p>
            </div>
        </div>
    </div>

    <script>
        const terminal = document.getElementById('terminal');
        const inputLine = document.getElementById('input-line');
        const input = document.getElementById('input');
        const prompt = document.getElementById('prompt');
        const windowsInterface = document.getElementById('windows-interface');
        const closeButton = document.getElementById('close-button');
        
        const commands = {
            help: 'Available commands: help, dir, echo, cls, exit, cd, time, win',
            dir: '<span class="error">No disks found.</span>',
            echo: (args) => args.join(' '),
            cls: () => {
                terminal.innerHTML = 'Microsoft DOS [Version 6.22]<br>(C)Copyright Microsoft Corp 1981-1994.<br>';
                terminal.appendChild(inputLine);
            },
            exit: () => alert('Closing the emulator.'),
            cd: (args) => {
                if (args.length > 0) {
                    const dir = args[0];
                    terminal.innerHTML += `<div>C:\\>cd ${dir}</div><div class="error">Because you killed me</div>`;
                    setTimeout(crashSystem, 2000);
                } else {
                    return '<span class="error">Directory name missing.</span>';
                }
            },
            time: () => {
                const now = new Date();
                return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')} ${String(now.getDate()).padStart(2, '0')}/06/1994`;
            },
            win: () => {
                windowsInterface.style.display = 'block';
                input.disabled = true;
                return 'Starting Windows 1.0...';
            }
        };

        const closeWindowsInterface = () => {
            windowsInterface.style.display = 'none';
            input.disabled = false;
            terminal.innerHTML += `<div class="error">Maybe next time</div>`;
            terminal.appendChild(inputLine);
            focusInput();
        };

        const crashSystem = () => {
            terminal.innerHTML = '';
            const crashMessage = document.createElement('div');
            crashMessage.classList.add('crash');
            crashMessage.textContent = 'Please restart the system';
            terminal.appendChild(crashMessage);

            const blink = () => {
                crashMessage.style.opacity = crashMessage.style.opacity === '0' ? '1' : '0';
                setTimeout(blink, Math.random() * (1000 - 300) + 300);
            };
            blink();

            input.disabled = true;
            input.placeholder = "Reload the page to continue";
        };

        const focusInput = () => {
            input.focus();
            setTimeout(() => {
                if (document.activeElement !== input) {
                    input.focus();
                }
            }, 50);
        };

        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !input.disabled) {
                const commandLine = input.value.trim().toLowerCase();
                if (commandLine) {
                    const [command, ...args] = commandLine.split(' ');
                    const result = commands[command] ? (typeof commands[command] === 'function' ? commands[command](args) : commands[command]) : `Unknown command: ${command}`;
                    terminal.innerHTML += `<div>C:\\> ${commandLine}</div><div>${result}</div>`;
                }
                input.value = '';
                terminal.scrollTop = terminal.scrollHeight;
                terminal.appendChild(inputLine);
            }
        });

        closeButton.addEventListener('click', closeWindowsInterface);
        focusInput();
    </script>
</body>
</html>
